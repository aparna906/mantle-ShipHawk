<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">
    <service verb="find" noun="Order">
        <in-parameters>
            <parameter name="statusId"/>
        </in-parameters>

        <out-parameters>
            <parameter name="responseMap"/>
        </out-parameters>
        <actions>
            <set field="source_system_id" value="SH123"/>

            <entity-find entity-name="mantle.order.OrderHeaderAndPart" list="orderHeaderAndPartsList">
                <econdition field-name="statusId" value="OrderApproved"/>
            </entity-find>
            <iterate list="orderHeaderAndPartsList" entry="orderHeaderAndPart">
                <set field="order_number" from="orderHeaderAndPart.orderId"/>

                <log message="===============order_number:${orderHeaderAndPart.orderId}============="/>


                <!--         origin_address-->
                <entity-find entity-name="mantle.order.OrderPart" list="part">
                    <econdition field-name="statusId"/>
                </entity-find>

                <entity-find entity-name="mantle.facility.Facility" list="facility">
                    <econdition field-name="facilityId" from="orderHeaderAndPart.facilityId"/>
                </entity-find>
                <log message="===============facilityId:${facility}============="/>


                <entity-find entity-name="mantle.facility.FacilityContactMech" list="conList">
                    <econdition field-name="facilityId" from="facility.facilityId"/>
                    <select-field field-name="contactMechId"/>
                </entity-find>

                <log message="===============contactList:${conList.contactMechId}============="/>

                <entity-find entity-name="mantle.facility.FacilityContactMechPostalAddress" list="addList">
                    <econdition field-name="contactMechId" from="conList.contactMechId"/>
                    <select-field field-name="toName"/>
                    <select-field field-name="address1"/>
                    <select-field field-name="city"/>
                    <select-field field-name="stateProvinceGeoId"/>
                    <select-field field-name="postalCode"/>
                    <select-field field-name="infoString"/>
                </entity-find>
                <log message="===============address:${addList}============="/>

                <iterate list="addList" entry="address">
                    <log message="=======address====${address}======"/>
                    <set field="origin_address" from="[name:address.toName,street1:address.address1,city:address.city,
                                  state:address.stateProvinceGeoId,zip:address.postalCode,email:address.infoString]"/>
                </iterate>

                <log message="===========origin_address:${origin_address}"/>

                <set field="requestMap" from="[order_number:order_number,origin_address:origin_address]"/>
                <log message="==============requestMap======${requestMap}========"/>
            </iterate>
            <script>
                <![CDATA[
                org.moqui.util.RestClient
                restClient = ec.service.rest().method(org.moqui.util.RestClient.POST)
                .addHeader("Content-Type", "application/json").jsonObject(requestMap)
                restClient.uri().protocol("https").host("sandbox.shiphawk.com")

//                TO DO Remove the hardcoded api key as it is not recommended to store any credentials in the public repo
                .port(443).path("/api/v4/orders?api_key=03341427e3d29f6cb89c04749136a811").build()
                org.moqui.util.RestClient.RestResponse restResponse = restClient.call()
                if (restResponse.statusCode < 200 || restResponse.statusCode >= 300) {
                    String errMsg = restResponse.text()
                    ec.logger.error("error response (${restResponse.statusCode}): ${errMsg}")
                    ec.message.addMessage("API error")
                    ec.message.addMessage(errMsg)
                    return
                }
                responseMap = restResponse.jsonObject()]]>
                println(responseMap);
            </script>
        </actions>
    </service>
</services>



















